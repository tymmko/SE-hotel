module.exports = {
	'root': true,
	'env': {
		'browser': true,
		'es2021': true,
		'node': true,
		'jest': true,
	},
	'extends': [
		'eslint:recommended',
		'plugin:react/recommended',
		'plugin:react-hooks/recommended',
		'plugin:@typescript-eslint/recommended',
	],
	'ignorePatterns': [
		'build/**/*',
		'coverage/**/*',
		'packages/assets/**/*',
		'packages/redux-ui-router/**/*',
	],
	'parser': '@typescript-eslint/parser',
	'parserOptions': {
		'ecmaFeatures': {
			'jsx': true,
		},
		'ecmaVersion': 12,
		'sourceType': 'module',
	},
	'plugins': [
		'react',
		'@typescript-eslint',
		'eslint-plugin-import',
		'eslint-plugin-unicorn',
		'@typescript-eslint/tslint',
	],
	'settings': {
		'react': {
			'version': '16.8.1',
		},
	},
	'rules': {
		'indent': [
			'warn',
			'tab',
			{
				'FunctionDeclaration': {
					'parameters': 'first',
				},
				'FunctionExpression': {
					'parameters': 'first',
				},
				'SwitchCase': 1,
			},
		],
		'@typescript-eslint/naming-convention': 'warn',
		'linebreak-style': [
			'error',
			'unix',
		],
		'quotes': [
			'error',
			'single',
		],
		'semi': [
			'error',
			'always',
		],
		'@typescript-eslint/ban-ts-comment': 1,
		'@typescript-eslint/no-explicit-any': 1,
		'@typescript-eslint/no-var-requires': 1,
		'no-mixed-spaces-and-tabs': 1,
		'react/display-name': 0,
		'react/prop-types': 0,
		'no-useless-escape': 1,
		'no-case-declarations': 0,
		'@typescript-eslint/adjacent-overload-signatures': 'error',
		'@typescript-eslint/array-type': [
			'error',
			{
				'default': 'array-simple',
			},
		],
		'@typescript-eslint/ban-types': [
			'error',
			{
				'types': {
					'Object': {
						'message': 'Avoid using the `Object` type. Did you mean `object`?',
					},
					'Function': {
						'message': 'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.',
					},
					'Boolean': {
						'message': 'Avoid using the `Boolean` type. Did you mean `boolean`?',
					},
					'Number': {
						'message': 'Avoid using the `Number` type. Did you mean `number`?',
					},
					'String': {
						'message': 'Avoid using the `String` type. Did you mean `string`?',
					},
					'Symbol': {
						'message': 'Avoid using the `Symbol` type. Did you mean `symbol`?',
					},
				},
			},
		],
		'@typescript-eslint/consistent-type-assertions': 'error',
		'@typescript-eslint/consistent-type-definitions': 'off',
		'@typescript-eslint/explicit-member-accessibility': [
			'error',
			{
				'accessibility': 'no-public',
			},
		],
		'@typescript-eslint/explicit-module-boundary-types': 'warn',
		'@typescript-eslint/member-delimiter-style': [
			'error',
			{
				'multiline': {
					'delimiter': 'comma',
					'requireLast': true,
				},
				'singleline': {
					'delimiter': 'comma',
					'requireLast': false,
				},
			},
		],
		'@typescript-eslint/member-ordering': 'warn',
		'@typescript-eslint/no-array-constructor': 'error',
		'@typescript-eslint/no-empty-function': 'error',
		'@typescript-eslint/no-empty-interface': 'error',
		'@typescript-eslint/no-extra-non-null-assertion': 'error',
		'@typescript-eslint/no-extra-semi': 'error',
		'@typescript-eslint/no-inferrable-types': 'error',
		'@typescript-eslint/no-misused-new': 'error',
		'@typescript-eslint/no-namespace': 'off',
		'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
		'@typescript-eslint/no-non-null-assertion': 'warn',
		'@typescript-eslint/no-parameter-properties': 'off',
		'@typescript-eslint/no-this-alias': 'error',
		'@typescript-eslint/no-unused-vars': 'warn',
		'@typescript-eslint/no-use-before-define': 'off',
		'@typescript-eslint/prefer-as-const': 'error',
		'@typescript-eslint/prefer-for-of': 'error',
		'@typescript-eslint/prefer-function-type': 'error',
		'@typescript-eslint/prefer-namespace-keyword': 'error',
		'@typescript-eslint/quotes': [
			'error',
			'single',
			{
				'avoidEscape': true,
			},
		],
		'@typescript-eslint/semi': [
			'error',
			'always',
		],
		'@typescript-eslint/triple-slash-reference': [
			'error',
			{
				'path': 'always',
				'types': 'prefer-import',
				'lib': 'always',
			},
		],
		'@typescript-eslint/type-annotation-spacing': 'error',
		'@typescript-eslint/unified-signatures': 'error',
		'comma-spacing': 'warn',
		'arrow-spacing': 'warn',
		'space-infix-ops': 'warn',
		'keyword-spacing': 'warn',
		'arrow-body-style': 'off',
		'arrow-parens': [
			'off',
			'always',
		],
		'brace-style': [
			'error',
			'1tbs',
		],
		'complexity': 'off',
		'constructor-super': 'error',
		'curly': 'error',
		'eol-last': 'error',
		'eqeqeq': [
			'error',
			'always',
		],
		'for-direction': 'error',
		'getter-return': 'error',
		'guard-for-in': 'error',
		'id-blacklist': [
			'error',
			'Number',
			'String',
			'Boolean',
			'Undefined',
			'undefined',
		],
		'id-match': 'error',
		'import/no-deprecated': 'error',
		'import/order': 'error',
		'jsdoc/check-alignment': 'error',
		'jsdoc/newline-after-description': 'error',
		'max-classes-per-file': [
			'error',
			1,
		],
		'new-parens': 'error',
		'no-async-promise-executor': 'error',
		'no-bitwise': 'error',
		'no-caller': 'error',
		'no-class-assign': 'error',
		'no-compare-neg-zero': 'error',
		'no-cond-assign': 'error',
		'no-console': 'warn',
		'no-const-assign': 'error',
		'no-constant-condition': 'error',
		'no-control-regex': 'error',
		'no-debugger': 'error',
		'no-delete-var': 'error',
		'no-dupe-args': 'error',
		'no-dupe-class-members': 'error',
		'no-dupe-else-if': 'error',
		'no-dupe-keys': 'error',
		'no-duplicate-case': 'error',
		'no-duplicate-imports': 'error',
		'no-empty': 'error',
		'no-empty-character-class': 'error',
		'no-empty-function': 'off',
		'no-empty-pattern': 'error',
		'no-eval': 'error',
		'no-ex-assign': 'error',
		'no-extra-boolean-cast': 'error',
		'no-extra-semi': 'off',
		'no-fallthrough': 'off',
		'no-func-assign': 'error',
		'no-global-assign': 'error',
		'no-import-assign': 'error',
		'no-inner-declarations': 'error',
		'no-invalid-regexp': 'error',
		'no-irregular-whitespace': 'error',
		'no-misleading-character-class': 'error',
		'no-multiple-empty-lines': 'error',
		'no-new-symbol': 'error',
		'no-new-wrappers': 'error',
		'no-obj-calls': 'error',
		'no-octal': 'error',
		'no-prototype-builtins': 'error',
		'no-redeclare': 'error',
		'no-regex-spaces': 'error',
		'no-self-assign': 'error',
		'no-setter-return': 'error',
		'no-shadow': [
			'off',
			{
				'hoist': 'all',
			},
		],
		'no-shadow-restricted-names': 'error',
		'no-sparse-arrays': 'error',
		'no-this-before-super': 'error',
		'no-throw-literal': 'error',
		'no-trailing-spaces': 'error',
		'no-multi-spaces': 'warn',
		'no-undef-init': 'error',
		'no-unexpected-multiline': 'error',
		'no-unreachable': 'error',
		'no-unsafe-finally': 'error',
		'no-unsafe-negation': 'error',
		'no-unused-labels': 'error',
		'no-useless-catch': 'error',
		'no-var': 'warn',
		'no-with': 'error',
		'object-shorthand': 'error',
		'one-var': [
			'warn',
			'never',
		],
		'padding-line-between-statements': [
			'error',
			{
				'blankLine': 'always',
				'prev': '*',
				'next': 'return',
			},
		],
		'prefer-const': 'warn',
		'quote-props': 'off',
		'radix': 'error',
		'key-spacing': 'warn',
		'space-before-blocks': 'warn',
		'comma-dangle': ['warn', 'always-multiline' ],
		'react-hooks/exhaustive-deps': 'warn',
		'react-hooks/rules-of-hooks': 'error',
		'react/jsx-key': 'error',
		'react/jsx-no-comment-textnodes': 'error',
		'react/jsx-no-duplicate-props': 'error',
		'react/jsx-no-target-blank': 'error',
		'react/jsx-no-undef': 'error',
		'react/jsx-uses-react': 'error',
		'react/jsx-uses-vars': 'error',
		'react/jsx-tag-spacing': [
			'warn',
			{
				'beforeSelfClosing': 'always',
			},
		],
		'react/no-children-prop': 'error',
		'react/no-danger-with-children': 'error',
		'react/no-deprecated': 'error',
		'react/no-direct-mutation-state': 'error',
		'react/no-find-dom-node': 'error',
		'react/no-is-mounted': 'error',
		'react/no-render-return-value': 'error',
		'react/no-string-refs': 'error',
		'react/no-unescaped-entities': 'error',
		'react/no-unknown-property': 'error',
		'react/no-unsafe': 'off',
		'react/react-in-jsx-scope': 'error',
		'react/require-render-return': 'error',
		'require-yield': 'error',
		'space-in-parens': [
			'error',
			'never',
		],
		'spaced-comment': [
			'error',
			'always',
			{
				'markers': [
					'/',
				],
			},
		],
		'use-isnan': 'error',
	},
};
