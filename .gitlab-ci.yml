stages:
  - install
  - test
  - build
  - package
  - docs
  - deploy

default:
  image: node:20

variables:
  NODE_ENV: production

# Install backend dependencies
install_backend:
  stage: install
  script:
    - cd application/backend
    - npm install --legacy-peer-deps --include=dev
  artifacts:
    paths:
      - application/backend/node_modules/

# Install frontend dependencies
install_frontend:
  stage: install
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps
  artifacts:
    paths:
      - application/frontend/node_modules/

# Frontend tests
test_frontend:
  stage: test
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps --include=dev
    - npm test
  artifacts:
    when: always
    paths:
      - application/frontend/test-results/
    reports:
      junit: application/frontend/test-results/junit.xml
  allow_failure: false

# Backend unit tests
test_backend_unit:
  stage: test
  dependencies:
    - install_backend
  script:
    - cd application/backend
    - npm test # This will now execute "npx jest --coverage"
  artifacts:
    when: always
    paths:
      - application/backend/coverage/
      - application/backend/test-results/
    reports:
      junit: application/backend/test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: application/backend/coverage/cobertura-coverage.xml
  allow_failure: false

# Build frontend
build_frontend:
  stage: build
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps --include=dev
    - npm run build
  variables:
    API_BASE_URL: https://backend.railway.internal
  artifacts:
    paths:
      - application/frontend/dist

# Build backend
build_backend:
  stage: build
  script:
    - cd application/backend
    - npm install --legacy-peer-deps --include=dev
  artifacts:
    paths:
      - application/backend/node_modules/

# Package release
package_release:
  stage: package
  image: node:20
  dependencies:
    - build_backend
    - build_frontend
  script:
    - apt-get update && apt-get install -y zip
    - mkdir release
    - cp -r application/backend release/backend
    - rm -rf release/backend/node_modules
    - cp -r application/frontend/dist release/frontend
    - cd release
    - zip -r ../release-package-$CI_COMMIT_BRANCH.zip .
  artifacts:
    paths:
      - release-package-$CI_COMMIT_BRANCH.zip
    name: "release-$CI_COMMIT_BRANCH"
    expire_in: 7 days
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "dev"'

# Generate docs frontend
docs_frontend:
  stage: docs
  image: node:20
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "dev"'
  script:
    - cd application/frontend
    - npx typedoc --options typedoc.json
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git clone "https://oauth2:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.wiki.git" wiki
    - rm -rf ../../wiki/*
    - cp -r docs/* ../../wiki/
    - cd ../../wiki
    - git add .
    - git commit -m "Update frontend logic docs [CI skip]" || echo "No changes to commit"
    - git push
  variables:
    GITLAB_USER_EMAIL: "docs-bot@example.com"
    GITLAB_USER_NAME: "Docs Bot"

# Deploy frontend
deploy_frontend:
  stage: deploy
  image: ghcr.io/railwayapp/cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
      allow_failure: false
  variables:
    RAILWAY_TOKEN: $RAILWAY_TOKEN
    FRONTEND_SVC_ID: $RAILWAY_FRONTEND_SVC_ID
    PROJECT_ID: $RAILWAY_PROJECT_ID
  script:
    - cd application/frontend
    - railway up --service=$FRONTEND_SVC_ID

# Deploy backend
deploy_backend:
  stage: deploy
  image: ghcr.io/railwayapp/cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
      allow_failure: false
  variables:
    RAILWAY_TOKEN: $RAILWAY_TOKEN
    BACKEND_SVC_ID: $RAILWAY_BACKEND_SVC_ID
    PROJECT_ID: $RAILWAY_PROJECT_ID
  script:
    - ls
    - cd application/backend
    - railway up --service=$BACKEND_SVC_ID

