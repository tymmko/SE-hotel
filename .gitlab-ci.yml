stages:
  - install
  - test
  - docs
  - build
  - package
  - release
  - deploy

default:
  image: node:20

variables:
  NODE_ENV: production

# Install backend dependencies
install_backend:
  stage: install
  script:
    - cd application/backend
    - npm install --legacy-peer-deps --include=dev
  artifacts:
    paths:
      - application/backend/node_modules/

# Install frontend dependencies
install_frontend:
  stage: install
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps
  artifacts:
    paths:
      - application/frontend/node_modules/
      - application/frontend/package-lock.json
      - application/frontend/package.json

# Frontend tests
test_frontend:
  stage: test
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps --include=dev
    - npm test
  artifacts:
    when: always
    paths:
      - application/frontend/test-results/
    reports:
      junit: application/frontend/test-results/junit.xml
  allow_failure: false

# Backend unit tests
test_backend_unit:
  stage: test
  dependencies:
    - install_backend
  script:
    - cd application/backend
    - npm test # This will now execute "npx jest --coverage"
  artifacts:
    when: always
    paths:
      - application/backend/coverage/
      - application/backend/test-results/
    reports:
      junit: application/backend/test-results/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: application/backend/coverage/cobertura-coverage.xml
  allow_failure: false

# Generate docs for frontend using TypeDoc
docs_frontend:
  stage: docs
  image: node:20
  dependencies:
    - install_frontend
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "dev"'
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps --include=dev
    - npx typedoc --out temp-docs
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git clone "https://oauth2:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.wiki.git" wiki-repo
    - mkdir -p wiki-repo/frontend-docs
    - rm -rf wiki-repo/frontend-docs/*
    - cp -r temp-docs/* wiki-repo/frontend-docs/
    - cd wiki-repo
    - git add .
    - git commit -m "Update frontend docs in wiki/frontend-docs [CI skip]" || echo "No changes to commit"
    - git push
  variables:
    GITLAB_USER_EMAIL: "docs-bot@example.com"
    GITLAB_USER_NAME: "Docs Bot"

# Build frontend
build_frontend:
  stage: build
  script:
    - cd application/frontend
    - npm install --legacy-peer-deps --include=dev
    - npm run build
  variables:
    API_BASE_URL: https://backend.railway.internal
  artifacts:
    paths:
      - application/frontend/dist

# Build backend
build_backend:
  stage: build
  script:
    - cd application/backend
    - npm install --legacy-peer-deps --include=dev
  artifacts:
    paths:
      - application/backend/node_modules/

# Package release
package_release:
  stage: package
  image: node:20
  dependencies:
    - build_backend
    - build_frontend
  script:
    - apt-get update && apt-get install -y zip
    - mkdir release
    - cp -r application/backend release/backend
    - rm -rf release/backend/node_modules
    - cp -r application/frontend/dist release/frontend
    - cd release
    - zip -r ../release-package-$CI_COMMIT_REF_NAME.zip .
  artifacts:
    paths:
      - release-package-$CI_COMMIT_REF_NAME.zip
    name: "release-$CI_COMMIT_REF_NAME"
    expire_in: 30 days
  rules:
    - if: '$CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_COMMIT_REF_NAME == "dev"'
    - if: '$CI_COMMIT_TAG'

# Upload release to GitLab Releases page
release_upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [package_release]
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "Creating release for $CI_COMMIT_REF_NAME"
  release:
    tag_name: "$CI_COMMIT_REF_NAME"
    name: "Release for $CI_COMMIT_REF_NAME"
    description: 'Automated release for $CI_COMMIT_REF_NAME'
    assets:
      links:
        - name: "Release Package"
          url: "$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/release-package-$CI_COMMIT_REF_NAME.zip"

# Upload release to GitLab Releases page
release_upload:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs: [package_release]
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "Creating release for $CI_COMMIT_REF_NAME"
  release:
    tag_name: "$CI_COMMIT_REF_NAME"
    name: "Release for $CI_COMMIT_REF_NAME"
    description: "Automated release package for tag $CI_COMMIT_REF_NAME"
    assets:
      links:
        - name: "Release Package"
          url: "$CI_PROJECT_URL/-/jobs/$CI_JOB_ID/artifacts/file/release-package-$CI_COMMIT_REF_NAME.zip"

# Deploy frontend
deploy_frontend:
  stage: deploy
  image: ghcr.io/railwayapp/cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
      allow_failure: false
  variables:
    RAILWAY_TOKEN: $RAILWAY_TOKEN
    FRONTEND_SVC_ID: $RAILWAY_FRONTEND_SVC_ID
    PROJECT_ID: $RAILWAY_PROJECT_ID
  script:
    - cd application/frontend
    - railway up --service=$FRONTEND_SVC_ID

# Deploy backend
deploy_backend:
  stage: deploy
  image: ghcr.io/railwayapp/cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      when: always
      allow_failure: false
  variables:
    RAILWAY_TOKEN: $RAILWAY_TOKEN
    BACKEND_SVC_ID: $RAILWAY_BACKEND_SVC_ID
    PROJECT_ID: $RAILWAY_PROJECT_ID
  script:
    - ls
    - cd application/backend
    - railway up --service=$BACKEND_SVC_ID

